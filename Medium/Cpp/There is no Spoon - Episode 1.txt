#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Don't let the machines win. You are humanity's last hope...
 **/
 //&& arr가 안될 가능성이 높음
void NeighborCalc(int i, int j, int width, int height, pair<int,int> (&neigh)[3], vector<string> arr )
{
    for (int h = i +1; h <= height; h++)
    {        
        if(h == height)
        {
            neigh[2] = {-1, -1};            
        }
        else if (arr[h][j] == '0')
        {
            neigh[2] = {h ,j};
            break;
        }
    }
    
    for(int w = j+ 1; w <= width; w++)
    {
        if(w == width)
        {
            neigh[1] = { -1, -1};
        }
        else if(arr[i][w] == '0')
        {
            neigh[1] = {i, w};
            break;            
        }
    }
    cout<< neigh[0].second << " " << neigh[0].first << " " <<
    neigh[1].second << " " << neigh[1].first << " " <<
    neigh[2].second << " " << neigh[2].first << " " <<endl;
}
int main()
{
    int width; // the number of cells on the X axis
    cin >> width; cin.ignore();
    int height; // the number of cells on the Y axis
    cin >> height; cin.ignore();
    
    vector<string> arr;
    for (int i = 0; i < height; i++) {
        
        string line; // width characters, each either 0 or .
        getline(cin, line);
        //가로는 다른쪽에서 구분
        arr.push_back(line);
        cerr << line << endl;//뭔가 있다면 line이 
    }
    pair<int,int> neighbor[3];//동 서 남 북 + 연결 << but 최대 3개연결이니 3개만
    for(int i =0; i < height; i++)
        for(int j = 0; j< width; j++)
        {
            if(arr[i][j] == '0')
            {
                neighbor[0] = {i,j};
                cerr << neighbor[0].second << " " << neighbor[1].first ;
                NeighborCalc(i,j, width,height, neighbor, arr);
//                cerr << neighbor[0].second << " " << neighbor[1].first << endl;                
            }
        }


    // Write an action using cout. DON'T FORGET THE "<< endl"
    // To debug: cerr << "Debug messages..." << endl;


    // Three coordinates: a node, its right neighbor, its bottom neighbor
   // cout << "0 0 1 0 0 1" << endl;
}