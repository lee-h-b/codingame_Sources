#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
int main()
{
    int nbFloors; // number of floors
    int width; // width of the area
    int nbRounds; // maximum number of rounds
    int exitFloor; // floor on which the exit is found
    int exitPos; // position of the exit on its floor
    int nbTotalClones; // number of generated clones
    int nbAdditionalElevators; // ignore (always zero)
    int nbElevators; // number of elevators
    vector<pair<int, int> > elevator;
    
    cin >> nbFloors >> width >> nbRounds >> exitFloor >> exitPos >> nbTotalClones >> nbAdditionalElevators >> nbElevators; cin.ignore();
    for (int i = 0; i < nbElevators; i++) {
        int elevatorFloor; // floor on which this elevator is found
        int elevatorPos; // position of the elevator on its floor
        cin >> elevatorFloor >> elevatorPos; cin.ignore();
        elevator.push_back( { elevatorFloor, elevatorPos} );
    }
    //[]가 람다인듯 한데 과연 잘됐을까
    sort(elevator.begin(), elevator.end(), [](auto &l, auto& r)
    {
        return l.first < r.first;
    });
    


    // game loop
    while (1) {
        int cloneFloor; // floor of the leading clone
        int clonePos; // position of the leading clone on its floor
        string direction; // direction of the leading clone: LEFT or RIGHT
        cin >> cloneFloor >> clonePos >> direction; cin.ignore();
        
        int curExit;
        cerr << exitFloor << "mm " << cloneFloor << endl;
        if(exitFloor == cloneFloor)
        {
            curExit = exitPos;
        }
        else if( exitFloor > cloneFloor && cloneFloor >= 0)
        {
            curExit = elevator[cloneFloor].second;
        }
        
        if( curExit < clonePos && direction =="RIGHT" ||
        curExit > clonePos && direction == "LEFT")
        {
            cout << "BLOCK" << endl;
        }
        else
        cout << "WAIT" << endl; // action: WAIT or BLOCK
                cerr << curExit << " " <<  clonePos << endl;

    }
}