#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
 struct mode
 {
     public:
     bool power = false;
     bool revers = false;
     bool rotate = false;//막혀서 회전함을 뜻함
     char force_dir = ' ';
     
     pair<int, int> dir[4] = {
         {1,0}, {0,1}, {-1,0}, {0,-1}
     };
     int dirnum = 0;
     void ForceMove()
     {
         switch(force_dir)
         {
             case 'S' : dirnum = 0; break;
             case 'E' : dirnum = 1; break;
             case 'N' : dirnum = 2; break;
             case 'W' : dirnum = 3; break;             
         }
     }
     void rotation()
     {

        force_dir = ' ';//강제이동을 금함
        if(revers == true && rotate == false)
        {
             dirnum =3;
             rotate = true;
        }
        else if( revers == true)
        {
            dirnum--;
            if(dirnum < 0)
            dirnum = 3;
        }
        else if(rotate == false)
        {
            rotate = true;
            dirnum =0;
        }
        else
        {
            dirnum++;
            if(dirnum > 3) dirnum = 0;
        }
     }
     void GetFD(char ch)
     {
         force_dir = ch;
     }
     void powerSwitch()
     {
         power = !power;
     }
     void reverseSwitch()
     {
         revers = !revers;
     }
 };
int main()
{
    int L;
    int C;
    int count = 0;
    cin >> L >> C; cin.ignore();
    char map[L][C];
    pair<int,int> end,cursor;
    mode robot;
    for (int i = 0; i < L; i++) {
        string row;
        getline(cin, row);
        for(int j = 0; j < C; j++)
        {
            map[i][j] = row.at(j);
            if(row.at(j) == '$')
            {
                end = {i,j};
            }
            if(row.at(j) == '@')
            {
                cursor = {i,j};
            }
        }
    }
    queue<string> orders;
    while(true)
    {
//        int beforeCode;
//        int reverseVal;
    
//        string order;
        if(robot.force_dir != ' ') robot.ForceMove();
        
//        cursor.first += rodot.dir[robot.dirnum].first;
 //       cursor.second += rodot.dir[rodot.dirnum].second;
        pair<int ,int> fw {
            cursor.first + robot.dir[robot.dirnum].first,
            cursor.second + robot.dir[robot.dirnum].second
        };
        cerr << "Fw : " <<fw.first << " "  <<fw.second << endl;
        char mapchar = map[fw.first][fw.second];
        //장애물인지 확인, 맞으면 회전 아니면 앞으로 나아감 << 여기가 사실상 이동구문
        if( mapchar== '#' || mapchar == 'X' && robot.power ==false)
        {
            robot.rotation();
            continue;
        }
        else
        {
            robot.rotate = false;
            cursor = fw;
        }
        //특수행동들에 가까움 이동말고 robot의 옵션을 부여
        if(mapchar == 'E' || mapchar == 'W' || mapchar == 'S' || mapchar == 'N')
            robot.GetFD(mapchar);//위의 포스무브랑 합칠수 있지 않을까 합치고 여기서하고...mode
        if(mapchar == 'B')
            robot.powerSwitch();
        if(mapchar == 'I')
            robot.reverseSwitch();
        
        if(mapchar == 'X' && robot.power == true)
        {
            map[fw.first][fw.second] = ' ';
        }
        if(mapchar =='T')
        {
            for(int i = 0; i < L; i++)
            {
                for(int j = 0; j < C; j++)
                {
                    if(map[i][j] == 'T' && ( i != fw.first || j != fw.second) )
                    {//fw가 아닌 커서
                        cursor = { i, j};
                        break;
                    }
                }
            }
        }
        
        cerr<<count<<endl;
        cerr<<mapchar<<endl;
        //출력을 시키니 루프를 못낸다 이걸 담아서 뱉도록하자
        switch(robot.dirnum)
        {
            case 0: orders.push( "SOUTH"); break;
            case 1: orders.push( "EAST"); break;
            case 2: orders.push( "NORTH"); break;
            case 3: orders.push( "WEST"); break;            
        }
        if(mapchar =='$') break;

        count++;
        

        
        if(count >= C*L)
        {
            cout << "LOOP" << endl;
            return 0;
        }
    }
    while(orders.empty() == false)
    {
        cout << orders.front() <<endl;
        orders.pop();
    }

    // Write an action using cout. DON'T FORGET THE "<< endl"
    // To debug: cerr << "Debug messages..." << endl;

}