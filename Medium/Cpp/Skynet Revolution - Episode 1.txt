#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
int main()
{
    int N; // the total number of nodes in the level, including the gateways
    int L; // the number of links
    int E; // the number of exit gateways
    vector<int> gates;
    vector<pair<int, int> > link;
    
    cin >> N >> L >> E; cin.ignore();
    for (int i = 0; i < L; i++) {
        int N1; // N1 and N2 defines a link between these nodes
        int N2;
        cin >> N1 >> N2; cin.ignore();
        link.push_back( {N1,N2});
    }
    for (int i = 0; i < E; i++) {
        int EI; // the index of a gateway node
        cin >> EI; cin.ignore();
        gates.push_back(EI);
    }
    // game loop
            int pick;
    while (1) {
        int SI; // The index of the node on which the Skynet agent is positioned this turn
        cin >> SI; cin.ignore();
        for(int i = 0; i <L; i++)
        {
            if(link[i].first == SI || link[i].second == SI)
            {
                pick = i;
                if(find(gates.begin(), gates.end(), link[i].first) != gates.end() || 
                    find(gates.begin(), gates.end(), link[i].second)!= gates.end() )               
                break;
            }
        }
            cout << link[pick].first << " " << link[pick].second <<endl;
    }
}